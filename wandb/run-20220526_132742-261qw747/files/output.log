===============================================================================
                                     CVXPY
                                     v1.2.0
===============================================================================
(CVXPY) May 26 01:27:49 PM: Your problem has 1000 variables, 1 constraints, and 0 parameters.
(CVXPY) May 26 01:27:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) May 26 01:27:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) May 26 01:27:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
Traceback (most recent call last):
  File "c:\Users\gizem\Documents\GitHub\noisy_fair\only_min_margin.py", line 546, in <module>
    aspect_ratio_l1(d=1000, n=100, change_d=False, n_runs=2, s=1, l2=True)
  File "c:\Users\gizem\Documents\GitHub\noisy_fair\only_min_margin.py", line 305, in aspect_ratio_l1
    err_mm, err_train_mm, err_mm_l1, err_train_mm_l1,  wmm_l2, wmm_l1 = margin_classifiers_perf(d=d,n=n,approx_tau=1, SNR=10, n_test=1e4, s=s, l1=True, random_flip_prob=sigma, l2=l2)
  File "c:\Users\gizem\Documents\GitHub\noisy_fair\only_min_margin.py", line 195, in margin_classifiers_perf
    _,_, wmm = solve_svc_problem(xs, ys, p=2, solver='OSQP')
  File "c:\Users\gizem\Documents\GitHub\noisy_fair\only_min_margin.py", line 539, in solve_svc_problem
    results = prob.solve(solver=solver, verbose=True)
  File "C:\Users\gizem\anaconda3\envs\soccer2\lib\site-packages\cvxpy\problems\problem.py", line 481, in solve
    return solve_func(self, *args, **kwargs)
  File "C:\Users\gizem\anaconda3\envs\soccer2\lib\site-packages\cvxpy\problems\problem.py", line 1003, in _solve
    data, solving_chain, inverse_data = self.get_problem_data(
  File "C:\Users\gizem\anaconda3\envs\soccer2\lib\site-packages\cvxpy\problems\problem.py", line 607, in get_problem_data
    solving_chain = self._construct_chain(
  File "C:\Users\gizem\anaconda3\envs\soccer2\lib\site-packages\cvxpy\problems\problem.py", line 841, in _construct_chain
    return construct_solving_chain(self, candidate_solvers, gp=gp,
  File "C:\Users\gizem\anaconda3\envs\soccer2\lib\site-packages\cvxpy\reductions\solvers\solving_chain.py", line 162, in construct_solving_chain
    reductions = _reductions_for_problem_class(problem, candidates, gp)
  File "C:\Users\gizem\anaconda3\envs\soccer2\lib\site-packages\cvxpy\reductions\solvers\solving_chain.py", line 115, in _reductions_for_problem_class
    raise SolverError("Problem could not be reduced to a QP, and no "
cvxpy.error.SolverError: Problem could not be reduced to a QP, and no conic solvers exist among candidate solvers ({'qp_solvers': ['OSQP'], 'conic_solvers': []}).