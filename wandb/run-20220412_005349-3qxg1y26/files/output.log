tensor([ 0.0314, -0.0013, -0.0018,  ...,  0.0041,  0.0034,  0.0037])
CMM train_err=0.0, err=44.88500213623047
1.7997761964797974
1.1488398313522339
0.863396406173706
0.7381788492202759
0.6834182739257812
0.6597368717193604
0.6497743725776672
0.6457831263542175
0.644298791885376
0.6437739729881287
0.64357590675354
0.6434934139251709
0.6434570550918579
0.6434409022331238
0.6434339880943298
0.6434309482574463
0.643429696559906
0.6434286236763
0.6434282064437866
0.6434283256530762
0.6434277296066284
0.643427848815918
0.6434281468391418
0.6434280276298523
0.6434279680252075
0.6434281468391418
0.6434280276298523
0.6434280872344971
tensor([ 0.0729, -0.0028, -0.0037,  ...,  0.0093,  0.0076,  0.0078],
       requires_grad=True)
w=1.0, train_err=0.0, err=44.90500259399414
====================l1=========================
CMM train_err=0.0, err=6.580000400543213
3049.535400390625
2184.114013671875
1507.7747802734375
1219.544677734375
727.3531494140625
441.1490783691406
265.0475769042969
166.2490692138672
80.5504379272461
38.386680603027344
1501.875732421875
789.421875
370.6119384765625
5490.77294921875
4620.353515625
3851.95361328125
3180.194580078125
2610.076904296875
2110.650634765625
1694.41845703125
1342.23583984375
1047.8426513671875
808.5469360351562
616.14990234375
466.82647705078125
351.5162048339844
17942.736328125
16970.86328125
16035.982421875
15135.9453125
14269.05078125
13436.76171875
12640.712890625
11882.125
11154.830078125
10463.591796875
9803.826171875
9175.685546875
8577.4072265625
8007.23388671875
7461.94580078125
6944.419921875
6453.90234375
5989.68310546875
5550.74755859375
5137.6298828125
4750.32177734375
6247.44775390625
5372.40283203125
4644.9990234375
4047.52587890625
3561.11669921875
3159.3505859375
2826.60791015625
2547.780029296875
2308.42236328125
2095.72412109375
1903.9959716796875
1728.5867919921875
1609.16064453125
1419.2769775390625
179658.765625
178665.78125
177675.578125
176690.65625
175707.5625
174726.0
173748.6875
172775.953125
171804.75
170835.671875
169870.0625
168908.328125
167949.78125
166995.28125
166043.671875
165095.5
164150.34375
163207.984375
162269.921875
161334.671875
160402.859375
159474.1875
158548.984375
157628.4375
156711.96875
155797.84375
154887.4375
153980.84375
153077.296875
152178.375
151283.203125
150392.875
149505.640625
148621.265625
147740.328125
146863.828125
145990.640625
145121.9375
144256.0625
143393.203125
142533.34375
141677.171875
140825.359375
139976.78125
139131.9375
138289.625
137476.140625
136609.0625
135776.671875
134946.703125
134120.6875
133298.625
132480.671875
131666.53125
130857.140625
130051.3828125
129249.1640625
128450.6640625
127654.3359375
126860.65625
126071.390625
125284.4921875
124499.53125
123717.65625
122938.3359375
122161.6328125
121387.7734375
120616.5859375
119848.8125
119084.453125
118323.46875
117564.7578125
116808.515625
116056.5625
115309.4375
114566.875
113828.3046875
113091.7265625
112358.6953125
111629.5546875
110904.0703125
110181.1328125
109461.59375
108745.5546875
108032.140625
107322.3984375
106616.984375
105915.5390625
105218.734375
104524.1328125
103832.4921875
103145.9296875
102463.0859375
101783.5078125
101107.015625
100434.1171875
99764.5234375
99098.9453125
98436.65625
97777.0078125
97119.8828125
96465.2890625
95813.75
95166.7265625
94524.6953125
93886.6875
93252.375
92621.6015625
91993.4453125
91367.65625
90743.6484375
90123.3203125
89506.0625
88891.296875
88279.5859375
87671.3359375
87067.875
86467.3125
85869.2421875
85274.4375
84682.046875
84093.015625
83507.734375
82925.28125
82345.5390625
81770.0859375
81199.09375
80631.671875
80067.1796875
79506.6484375
78948.7734375
78394.4296875
77842.75
77292.9609375
76746.0
76201.5
75659.0625
75119.2890625
74582.6484375
74049.3828125
73518.3046875
72990.15625
72464.8125
71942.5
71422.640625
Traceback (most recent call last):
  File "c:\Users\gizem\Documents\GitHub\noisy_fair\margin_no_imb.py", line 427, in <module>
    margin_classifiers_perf(d=5000,n=200,approx_tau=1, SNR=10, n_test=1e4, s=1, l1=True)
  File "c:\Users\gizem\Documents\GitHub\noisy_fair\margin_no_imb.py", line 290, in margin_classifiers_perf
    l.backward()
  File "C:\Users\gizem\anaconda3\envs\iw\lib\site-packages\torch\_tensor.py", line 363, in backward
    torch.autograd.backward(self, gradient, retain_graph, create_graph, inputs=inputs)
  File "C:\Users\gizem\anaconda3\envs\iw\lib\site-packages\torch\autograd\__init__.py", line 173, in backward
    Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
KeyboardInterrupt